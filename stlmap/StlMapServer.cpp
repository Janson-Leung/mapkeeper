// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "MapKeeper.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace mapkeeper;

class StlMapServer: virtual public MapKeeperIf {
 public:
  StlMapServer() {
  }

  ResponseCode::type ping() {
  }

  ResponseCode::type addMap(const std::string& mapName) {
  }

  ResponseCode::type dropMap(const std::string& mapName) {
  }

  void listMaps(StringListResponse& _return) {
  }

  void scan(RecordListResponse& _return, const std::string& mapName, const ScanOrder::type order, const std::string& startKey, const bool startKeyIncluded, const std::string& endKey, const bool endKeyIncluded, const int32_t maxRecords, const int32_t maxBytes) {
  }

  void get(BinaryResponse& _return, const std::string& mapName, const std::string& key) {
  }

  ResponseCode::type put(const std::string& mapName, const std::string& key, const std::string& value) {
  }

  ResponseCode::type insert(const std::string& mapName, const std::string& key, const std::string& value) {
  }

  ResponseCode::type update(const std::string& mapName, const std::string& key, const std::string& value) {
  }

  ResponseCode::type remove(const std::string& mapName, const std::string& key) {
  }

};

int main(int argc, char **argv) {
  int port = 9091;
  shared_ptr<StlMapServer> handler(new StlMapServer());
  shared_ptr<TProcessor> processor(new MapKeeperProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

